#!/usr/bin/env python
"""
piety.no_defaults - similar to piety script, also creates jobs pysh ed edd
 
Similar to piety script EXCEPT no Piety scheduler - just uses ordinary while loop.
No piety scheduler, so this runs terminal jobs only; there are no writer tasks.

Some differences from piety script and limitations: 
Line editor command is ed not edc
Must call ed() or edd() without arguments, ed('README.md') etc. does not work
Must exit ed and edd with q, exit pysh with exit(), ^D exit does not work
"""

import sys
import session, job, command, keyboard, key

# rename modules so we can use original module names as command names
import pysh as _pysh, ed as _ed, edd as _edd

# Session, a terminal task
console = session.Session(name='console', event=sys.stdin)

# Python shell

def pysh_startup():
    _pysh.pexit = False # enable pysh event loop, compare to Job stopped= below

pyshc = command.Command(prompt='>> ', reader=key.Key(),  handler=_pysh.mk_shell())
pysh = job.Job(session=console, application=pyshc, startup=pysh_startup, 
               # Enable exit on >> exit() or >> ^D
               stopped=(lambda: _pysh.pexit or pyshc.command == keyboard.C_d), 
               cleanup=_pysh.exit_pysh)

# line editor

def ed_startup():
    _ed.quit = False # enable event loop, compare to Job( stopped=...) arg below

ed = job.Job(session=console,
             application=command.Command(prompt='', handler=_ed.cmd),
             startup=ed_startup, stopped=(lambda: _ed.quit))
              
# display editor

def edd_startup():
    _edd.ed.quit = False # enable event loop, compare to Job( stopped=..) arg below
    _edd.init_display()

edd = job.Job(session=console, 
               application=
               command.Command(prompt='', reader=key.Key(), handler=_edd.cmd),
               startup=edd_startup, 
               stopped=(lambda: _edd.ed.quit), 
               cleanup=_edd.restore_display)

def main():
    """
    Run Python REPL and applications using pysh shell in a Session
    """
    global done
    pysh() # start the first job
    _pysh.pexit = False # reset, might be resuming after pysh.pexit(), quit()
    # No Piety scheduler - instead just use an ordinary while loop 
    while not _pysh.pexit:
        console.handler()  # block waiting for each single character 

if __name__ == '__main__':
    main()
