#!/usr/bin/env python
"""
piety.no_defaults - similar to piety script, also creates jobs pysh ed edd
 
Like the piety script EXCEPT the calls to the Job initializers use no defaults.

Some differences from piety script and limitations: 
Line editor command is ed not edc
Must call ed() or edd() without arguments, ed('README.md') etc. does not work
Must exit ed and edd with q, exit pysh with exit(), ^D exit does not work
Does not create file writer tasks (but they are easy to create "by
 hand" in the pysh shell).
"""

import sys
import piety, command, key

# rename modules so we can use original module names as command names
import pysh as _pysh, ed as _ed, edd as _edd

# console session, a Piety task, initially runs Python shell
# Then use console to run other jobs from shell: console.run(edc) etc.
console = piety.Session(name='console', input=sys.stdin)

# Python shell

def pysh_startup():
    _pysh.pexit = False # enable event loop, compare to Job( stop=...) arg below
    print("pysh shell, type any Python statement, exit() or Ctrl-D to exit")

pyshc = command.Command(prompt='>> ', reader=key.Key(), handler=_pysh.mk_shell())
pysh = piety.Job(session=console,
               application=pyshc,
               startup=pysh_startup, 
               restart=pyshc.restart,
               reader=pyshc.reader, 
               handler_name='handler',
               stopped=(lambda: _pysh.pexit),
               cleanup=piety.quit)

# line editor

def ed_startup():
    _ed.quit = False # enable event loop, compare to Job( stop=...) arg below

# use default Command reader, terminal.getchar
edc = command.Command(prompt='', handler=_ed.cmd)
ed = piety.Job(session=console,
             application=edc,
             startup=ed_startup, 
             restart=edc.restart,
             reader=edc.reader,
             handler_name='handler',
             stopped=(lambda: _ed.quit))
              
# display editor

def edd_startup():
    _edd.ed.quit = False # enable event loop, compare to Job( stop=...) arg below
    _edd.init_display()

eddc = command.Command(prompt='', reader=key.Key(), handler=_edd.cmd)
edd = piety.Job(session=console,
              application=eddc,
              startup=edd_startup, 
              restart=eddc.restart,
              reader=eddc.reader,
              handler_name='handler',
              stopped=(lambda: _edd.ed.quit), 
              cleanup=_edd.restore_display)

def main():
    """
    Run Python REPL and applications using pysh shell in a Session
    """
    piety.done = False # reset, might be resuming after pysh.pexit(), piety.quit()
    pysh() # start the first job
    piety.run()  # start event loop, continue until pysh >> exit()

if __name__ == '__main__':
    main()
