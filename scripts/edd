"""
edd - Run a pysh Python shell, ed and edd editors in a Session.
 Use command and key modules instead of Python raw_input to get command line.
 Use Piety scheduler - just use loop

  $ python -i edd
 pysh shell, type any Python statement, exit() or Ctrl-D to exit
 >> console.run(edc)   # run the ed line editor
 ...
 q                     # exit ed, return to pysh Python shell
 >> console.run(eddc)  # run the edd display editor
 ...
 q
 >> exit()             # exit from pysh Python shell
 >>>                   # Back to regular Python shell

"""

import sys
import pysh, ed, edd, command, key, session
import piety

quit = False

def pexit():
    global quit
    quit = True
    console.stop()

def banner():
    print "pysh shell, type any Python statement, exit() or Ctrl-D to exit"

# Note here we assign pexit to job control suspend arg
pyshc = command.Command(startup=banner, prompt='>> ', handler=pysh.mk_shell(), 
                        stopcmd='exit()', suspend=pexit)

console = session.Session(name='console', event=sys.stdin, job=pyshc)

# here we leave default cleanup arg None, but assign callback to suspend arg
edc = command.Command(prompt='', handler=ed.cmd, 
                      stopcmd='q', suspend=console.stop) 

eddc = command.Command(prompt='', startup=edd.init_display, handler=edd.cmd, 
                       stopcmd='q', cleanup=edd.restore_display,
                       suspend=console.stop) 

tconsole = piety.Task(name='tconsole', event=sys.stdin, 
                      handler=console.handle_key)

# FIXME - doesn't reassign k.handler when foreground is reassigned by session
# k = key.Key(console.foreground.handle_key)


def main():
    piety.done = False # reset, might be resuming after p.exit() 
    console.foreground() # FIXME?  Is this/should this be necessary?
    piety.run(nevents=0) # loop forever, don't return
    
if __name__ == '__main__':
    main()
