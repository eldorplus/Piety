#!/usr/bin/env python
"""
Run a Piety session with pysh shell, ed line editor, and edd display editor.
 Starts shell with >> prompt, type vt.ed() or vt.edd() to start an editor.
"""

import sys

import terminal
import key
import line
import console
import pysht
import piety as p

import ed
import edd

class Namespace(object): pass  # use object names as disambigating prefixes

t = Namespace() # p.Task objects
kb = Namespace() # key.Key objects
vt = Namespace() # console.Console objects

# pysh

# t.pysh is the task running the vt.pysh console via kb.pysh
t.pysh= p.Task(name='pysh', event=p.sys.stdin)

# vt.pysh is the console whose command is the pysh shell
vt.pysh = console.Console(prompt='>> ', command=pysht.mk_shell(), 
                          resume=p.mk_resume(t.pysh), quit=p.quit,
                          pause=p.mk_pause(t.pysh, terminal.restore),
                          optional_keymap=line.keymap)

# kb.pysh is the key whose console is vt.pysh
kb.pysh = key.Key(vt.pysh.handle_key)

# now that we have kb object we can assign handler
t.pysh.handler = kb.pysh.getchar

# ed, note : prompt

def ed_pause():
    terminal.restore()

t.ed = p.Task(name='ed', event=p.sys.stdin)
vt.ed = console.Console(prompt=':', command=ed.cmd,
                         resume=p.mk_resume(t.ed), quit=ed.q,
                         pause=p.mk_pause(t.ed),
                         optional_keymap=line.keymap)
kb.ed = key.Key(vt.ed.handle_key)
t.ed.handler = kb.ed.getchar

# edd
t.edd = p.Task(name='edd', event=p.sys.stdin)
vt.edd = console.Console(prompt='', command=edd.cmd,
                         resume=p.mk_resume(t.edd, edd.init_display), 
                         quit=ed.q,
                         pause=p.mk_pause(t.edd, edd.restore_display),
                         optional_keymap=line.keymap)
kb.edd = key.Key(vt.edd.handle_key)
t.edd.handler = kb.edd.getchar

def main():
    'Assign focus to pysh shell, print shell prompt, (re)start scheduler.'
    vt.pysh()
    console.Console.continues = True
    p.done = False # reset, might be resuming after p.exit() 
    p.run(nevents=0) # loop forever, don't return
    terminal.restore()

if __name__ == '__main__':
    main()
