#!/usr/bin/env python
"""
piety.twisted_eventloop - Session + Job + CommandLine + pysh, ed, edd 
                           + Twisted eventloop

Uses the Twisted non-blocking event loop.  Similar to piety script,
but uses the Twisted *reactor.run* method instead of Piety *piety.run*
to concurrently run the console jobs and writers.  The body of the
event loop called by Twisted *reactor.run* is in the *twisted/eventloop* module,
which must be imported here in place of the usual Piety *selected/eventloop*.

Also uses *console_tasks_receiver* and *writer_tasks*.

Use directions in piety script docstring, in particular use edc(...)
to start line editor and edd(...) for display editor.
"""

import piety # imports twisted/eventloop.py

# Piety Writer tasks in writer_tasks module don't appear explicitly here - 
# they are referenced by the piety.schedule data structure used by piety.run
import writer_tasks

# Likewise, console jobs and session are referenced in console_tasks...jobs,
# and the session is also referenced in piety.schedule
# Must import identifiers used below and in pysh shell
# It seems pysh shell command line sees same scope as code in this module
from console_tasks_receiver_eventloop import console, jobs, pysh, edc, edd

def main():
    """
    Run the console session and writer tasks concurrently under Twisted event loop
    """
    jobs.pysh() # start the first job, recall pysh is in jobs namespace
    piety.done = False # reset, might be resuming after pysh.pexit(), piety.quit()
    piety.run() # start event loop, continue until pysh >> exit()

if __name__ == '__main__':
    main()
